name: CI
on:
  push:
    branches: [ "develop", "main" ]

env:
  NODE_VERSION: 20
  NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
  IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
  INSTANCE_ID: ${{ github.ref == 'refs/heads/main' && secrets.EC2_INSTANCE_ID_PROD || secrets.EC2_INSTANCE_ID }}

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ secrets.GH_PAT }}

    - name: Move .env files from scheduler to root
      run: |
        mv BE-secret/scheduler/.env* ./
        ls -al

    - name: Install pnpm
      uses: pnpm/action-setup@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install

    - name: Build
      run: pnpm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY_URI }}

    - name: Docker build & push to ECR
      run: docker build -t ${{ secrets.ECR_REGISTRY_URI }}:${{ env.IMAGE_TAG }} -f Dockerfile --push .

    - name: Server Deploy
      run: |
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --instance-ids "${{ env.INSTANCE_ID }}" \
          --parameters commands='[
            "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY_URI }}",
            "cd /root",
            "[ $(docker ps --filter 'publish=1024' -q | wc -l) -gt 0 ] && docker stop $(docker ps --filter 'publish=1024' -q)",
            "[ $(docker images -q ${{ secrets.ECR_REGISTRY_URI }}:${{ env.IMAGE_TAG }} | wc -l) -gt 0 ] && docker rmi ${{ secrets.ECR_REGISTRY_URI }}:${{ env.IMAGE_TAG }}",
            "docker pull ${{ secrets.ECR_REGISTRY_URI }}:${{ env.IMAGE_TAG }}",
            "docker run --rm -d -p 1024:1024 --name writely-scheduler -e NODE_ENV=${{ env.NODE_ENV }} ${{ secrets.ECR_REGISTRY_URI }}:${{ env.IMAGE_TAG }}"
          ]' \
          --comment "Deploying Docker container"
          